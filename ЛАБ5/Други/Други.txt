//2. Napisati program kojim se vrši šifrovanje unesenog teksta korištenjem Cezarove šifre. Koristiti engleski
//   alfabet. Cezarovom šifrom se vrši zamjena svakog slova otvorenog teksta sa slovom koje je pomjereno
//   za određeni broj mjesta. Koristiti Cezarovu šifru sa desnim pomjerajem od tri mjesta:
//   Otvoreno: ABCDEFGHIJKLMNOPQRSTUVWXYZ
//   Šifra: DEFGHIJKLMNOPQRSTUVWXYZABC
//   Napomena: uzeti u obzir i mala i velika slova.
//   Nakon pokretanja programa bira se jedna od sljedeće dvije opcije:
//    unos novog teksta,
//    prikaz šifrovanog teksta koji se učitava iz binarne datoteke na standardnom izlazu.
//   Unos novih podataka:
//   Nakon unosa proizvoljnog teksta isti se šifruje i snima u binarnu datoteku koja se prosljeđuje kao prvi
//   argument komandne linije.
//   Čitanje podataka:
//   Podaci se čitaju iz datoteke čiji se naziv unosi putem standardnog ulaza ili iz datoteke koja se
//   prosljeđuje kao prvi argument komandne linije ukoliko se za naziv datoteke navede znak „#“.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
    char izbor, niz[100], novi_niz[100], ime_dat[100], c;
    int pomjeraj=3, duzina;
    FILE *dat;

    do {
        printf("Unesite u za unos, p za prikaz: ");
        scanf("%c",&izbor);
    } while( izbor != 'u' && izbor != 'p');

    if( izbor == 'u') {
        if( (dat = fopen(argv[1],"ab")) != NULL ) {

            printf("Unesite string za sifrovanje: ");
            scanf("%s", niz);

            duzina = strlen(niz);
            for(int j=0; j<duzina; j++) {
                if( (niz[j] >= 'a' && niz[j] <= 'z') || ( niz[j] >= 'A' && niz[j] <= 'Z')) {
                    if(niz[j] == 'x') novi_niz[j] = 'a';
                    else if(niz[j] == 'y') novi_niz[j] = 'b';
                    else if(niz[j] == 'z') novi_niz[j] = 'c';
                    else if(niz[j] == 'X') novi_niz[j] = 'A';
                    else if(niz[j] == 'Y') novi_niz[j] = 'B';
                    else if(niz[j] == 'Z') novi_niz[j] = 'C';
                    else novi_niz[j] = niz[j] + pomjeraj;
                }
                else novi_niz[j] = niz[j];

                fputc(novi_niz[j], dat);
            }

            fclose(dat);
        }else return (printf("Neuspjesno upisivanje u .dat"), -1);
    }
    else {
        if(strcmp("#.dat",argv[1]) == 0)
            if( (dat = fopen(argv[1],"rb")) != NULL )
                 while ( fread(&c, sizeof(char), 1, dat) )
                        printf("%c", c);

            else return printf("Neuspjesno iscitavanje iz #.dat"), -1;

        else {
            printf("Unesite ime binarne datoteke: ");
            scanf("%s",ime_dat);

            if( (dat = fopen(ime_dat,"rb")) != NULL )
                while ( fread(&c, sizeof(char), 1, dat) )
                        printf("%c", c);

            else return printf("Neuspjesno iscitavanje iz .dat"), -1;
            }
    }

    return 0;
}
